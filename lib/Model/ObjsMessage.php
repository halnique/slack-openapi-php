<?php
/**
 * ObjsMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsMessage Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjsMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attachments' => '\OpenAPI\Client\Model\ObjsMessageAttachments[]',
        'blocks' => 'object[]',
        'bot_id' => 'object',
        'client_msg_id' => 'string',
        'comment' => '\OpenAPI\Client\Model\ObjsComment',
        'display_as_bot' => 'bool',
        'file' => '\OpenAPI\Client\Model\ObjsFile',
        'files' => '\OpenAPI\Client\Model\ObjsFile[]',
        'icons' => '\OpenAPI\Client\Model\ObjsMessageIcons',
        'inviter' => 'string',
        'is_delayed_message' => 'bool',
        'is_intro' => 'bool',
        'is_starred' => 'bool',
        'last_read' => 'string',
        'latest_reply' => 'string',
        'name' => 'string',
        'old_name' => 'string',
        'parent_user_id' => 'string',
        'permalink' => 'string',
        'pinned_to' => 'string[]',
        'purpose' => 'string',
        'reactions' => '\OpenAPI\Client\Model\ObjsReaction[]',
        'replies' => '\OpenAPI\Client\Model\ObjsMessageReplies[]',
        'reply_count' => 'int',
        'reply_users' => 'string[]',
        'reply_users_count' => 'int',
        'source_team' => 'string',
        'subscribed' => 'bool',
        'subtype' => 'string',
        'team' => 'string',
        'text' => 'string',
        'thread_ts' => 'string',
        'topic' => 'string',
        'ts' => 'string',
        'type' => 'string',
        'unread_count' => 'int',
        'upload' => 'bool',
        'user' => 'string',
        'user_profile' => '\OpenAPI\Client\Model\ObjsUserProfileShort',
        'user_team' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'attachments' => null,
        'blocks' => null,
        'bot_id' => null,
        'client_msg_id' => null,
        'comment' => null,
        'display_as_bot' => null,
        'file' => null,
        'files' => null,
        'icons' => null,
        'inviter' => null,
        'is_delayed_message' => null,
        'is_intro' => null,
        'is_starred' => null,
        'last_read' => null,
        'latest_reply' => null,
        'name' => null,
        'old_name' => null,
        'parent_user_id' => null,
        'permalink' => 'uri',
        'pinned_to' => null,
        'purpose' => null,
        'reactions' => null,
        'replies' => null,
        'reply_count' => null,
        'reply_users' => null,
        'reply_users_count' => null,
        'source_team' => null,
        'subscribed' => null,
        'subtype' => null,
        'team' => null,
        'text' => null,
        'thread_ts' => null,
        'topic' => null,
        'ts' => null,
        'type' => null,
        'unread_count' => null,
        'upload' => null,
        'user' => null,
        'user_profile' => null,
        'user_team' => null,
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attachments' => 'attachments',
        'blocks' => 'blocks',
        'bot_id' => 'bot_id',
        'client_msg_id' => 'client_msg_id',
        'comment' => 'comment',
        'display_as_bot' => 'display_as_bot',
        'file' => 'file',
        'files' => 'files',
        'icons' => 'icons',
        'inviter' => 'inviter',
        'is_delayed_message' => 'is_delayed_message',
        'is_intro' => 'is_intro',
        'is_starred' => 'is_starred',
        'last_read' => 'last_read',
        'latest_reply' => 'latest_reply',
        'name' => 'name',
        'old_name' => 'old_name',
        'parent_user_id' => 'parent_user_id',
        'permalink' => 'permalink',
        'pinned_to' => 'pinned_to',
        'purpose' => 'purpose',
        'reactions' => 'reactions',
        'replies' => 'replies',
        'reply_count' => 'reply_count',
        'reply_users' => 'reply_users',
        'reply_users_count' => 'reply_users_count',
        'source_team' => 'source_team',
        'subscribed' => 'subscribed',
        'subtype' => 'subtype',
        'team' => 'team',
        'text' => 'text',
        'thread_ts' => 'thread_ts',
        'topic' => 'topic',
        'ts' => 'ts',
        'type' => 'type',
        'unread_count' => 'unread_count',
        'upload' => 'upload',
        'user' => 'user',
        'user_profile' => 'user_profile',
        'user_team' => 'user_team',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attachments' => 'setAttachments',
        'blocks' => 'setBlocks',
        'bot_id' => 'setBotId',
        'client_msg_id' => 'setClientMsgId',
        'comment' => 'setComment',
        'display_as_bot' => 'setDisplayAsBot',
        'file' => 'setFile',
        'files' => 'setFiles',
        'icons' => 'setIcons',
        'inviter' => 'setInviter',
        'is_delayed_message' => 'setIsDelayedMessage',
        'is_intro' => 'setIsIntro',
        'is_starred' => 'setIsStarred',
        'last_read' => 'setLastRead',
        'latest_reply' => 'setLatestReply',
        'name' => 'setName',
        'old_name' => 'setOldName',
        'parent_user_id' => 'setParentUserId',
        'permalink' => 'setPermalink',
        'pinned_to' => 'setPinnedTo',
        'purpose' => 'setPurpose',
        'reactions' => 'setReactions',
        'replies' => 'setReplies',
        'reply_count' => 'setReplyCount',
        'reply_users' => 'setReplyUsers',
        'reply_users_count' => 'setReplyUsersCount',
        'source_team' => 'setSourceTeam',
        'subscribed' => 'setSubscribed',
        'subtype' => 'setSubtype',
        'team' => 'setTeam',
        'text' => 'setText',
        'thread_ts' => 'setThreadTs',
        'topic' => 'setTopic',
        'ts' => 'setTs',
        'type' => 'setType',
        'unread_count' => 'setUnreadCount',
        'upload' => 'setUpload',
        'user' => 'setUser',
        'user_profile' => 'setUserProfile',
        'user_team' => 'setUserTeam',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attachments' => 'getAttachments',
        'blocks' => 'getBlocks',
        'bot_id' => 'getBotId',
        'client_msg_id' => 'getClientMsgId',
        'comment' => 'getComment',
        'display_as_bot' => 'getDisplayAsBot',
        'file' => 'getFile',
        'files' => 'getFiles',
        'icons' => 'getIcons',
        'inviter' => 'getInviter',
        'is_delayed_message' => 'getIsDelayedMessage',
        'is_intro' => 'getIsIntro',
        'is_starred' => 'getIsStarred',
        'last_read' => 'getLastRead',
        'latest_reply' => 'getLatestReply',
        'name' => 'getName',
        'old_name' => 'getOldName',
        'parent_user_id' => 'getParentUserId',
        'permalink' => 'getPermalink',
        'pinned_to' => 'getPinnedTo',
        'purpose' => 'getPurpose',
        'reactions' => 'getReactions',
        'replies' => 'getReplies',
        'reply_count' => 'getReplyCount',
        'reply_users' => 'getReplyUsers',
        'reply_users_count' => 'getReplyUsersCount',
        'source_team' => 'getSourceTeam',
        'subscribed' => 'getSubscribed',
        'subtype' => 'getSubtype',
        'team' => 'getTeam',
        'text' => 'getText',
        'thread_ts' => 'getThreadTs',
        'topic' => 'getTopic',
        'ts' => 'getTs',
        'type' => 'getType',
        'unread_count' => 'getUnreadCount',
        'upload' => 'getUpload',
        'user' => 'getUser',
        'user_profile' => 'getUserProfile',
        'user_team' => 'getUserTeam',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['blocks'] = isset($data['blocks']) ? $data['blocks'] : null;
        $this->container['bot_id'] = isset($data['bot_id']) ? $data['bot_id'] : null;
        $this->container['client_msg_id'] = isset($data['client_msg_id']) ? $data['client_msg_id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['display_as_bot'] = isset($data['display_as_bot']) ? $data['display_as_bot'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['icons'] = isset($data['icons']) ? $data['icons'] : null;
        $this->container['inviter'] = isset($data['inviter']) ? $data['inviter'] : null;
        $this->container['is_delayed_message'] = isset($data['is_delayed_message']) ? $data['is_delayed_message'] : null;
        $this->container['is_intro'] = isset($data['is_intro']) ? $data['is_intro'] : null;
        $this->container['is_starred'] = isset($data['is_starred']) ? $data['is_starred'] : null;
        $this->container['last_read'] = isset($data['last_read']) ? $data['last_read'] : null;
        $this->container['latest_reply'] = isset($data['latest_reply']) ? $data['latest_reply'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['old_name'] = isset($data['old_name']) ? $data['old_name'] : null;
        $this->container['parent_user_id'] = isset($data['parent_user_id']) ? $data['parent_user_id'] : null;
        $this->container['permalink'] = isset($data['permalink']) ? $data['permalink'] : null;
        $this->container['pinned_to'] = isset($data['pinned_to']) ? $data['pinned_to'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['reactions'] = isset($data['reactions']) ? $data['reactions'] : null;
        $this->container['replies'] = isset($data['replies']) ? $data['replies'] : null;
        $this->container['reply_count'] = isset($data['reply_count']) ? $data['reply_count'] : null;
        $this->container['reply_users'] = isset($data['reply_users']) ? $data['reply_users'] : null;
        $this->container['reply_users_count'] = isset($data['reply_users_count']) ? $data['reply_users_count'] : null;
        $this->container['source_team'] = isset($data['source_team']) ? $data['source_team'] : null;
        $this->container['subscribed'] = isset($data['subscribed']) ? $data['subscribed'] : null;
        $this->container['subtype'] = isset($data['subtype']) ? $data['subtype'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['thread_ts'] = isset($data['thread_ts']) ? $data['thread_ts'] : null;
        $this->container['topic'] = isset($data['topic']) ? $data['topic'] : null;
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unread_count'] = isset($data['unread_count']) ? $data['unread_count'] : null;
        $this->container['upload'] = isset($data['upload']) ? $data['upload'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_profile'] = isset($data['user_profile']) ? $data['user_profile'] : null;
        $this->container['user_team'] = isset($data['user_team']) ? $data['user_team'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['inviter']) && !preg_match("/^[UW][A-Z0-9]{8}$/", $this->container['inviter'])) {
            $invalidProperties[] = "invalid value for 'inviter', must be conform to the pattern /^[UW][A-Z0-9]{8}$/.";
        }

        if (!is_null($this->container['last_read']) && !preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['last_read'])) {
            $invalidProperties[] = "invalid value for 'last_read', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if (!is_null($this->container['latest_reply']) && !preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['latest_reply'])) {
            $invalidProperties[] = "invalid value for 'latest_reply', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if (!is_null($this->container['parent_user_id']) && !preg_match("/^[UW][A-Z0-9]{8}$/", $this->container['parent_user_id'])) {
            $invalidProperties[] = "invalid value for 'parent_user_id', must be conform to the pattern /^[UW][A-Z0-9]{8}$/.";
        }

        if (!is_null($this->container['source_team']) && !preg_match("/^[TE][A-Z0-9]{8}$/", $this->container['source_team'])) {
            $invalidProperties[] = "invalid value for 'source_team', must be conform to the pattern /^[TE][A-Z0-9]{8}$/.";
        }

        if (!is_null($this->container['team']) && !preg_match("/^[TE][A-Z0-9]{8}$/", $this->container['team'])) {
            $invalidProperties[] = "invalid value for 'team', must be conform to the pattern /^[TE][A-Z0-9]{8}$/.";
        }

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if (!is_null($this->container['thread_ts']) && !preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['thread_ts'])) {
            $invalidProperties[] = "invalid value for 'thread_ts', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if ($this->container['ts'] === null) {
            $invalidProperties[] = "'ts' can't be null";
        }
        if (!preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['ts'])) {
            $invalidProperties[] = "invalid value for 'ts', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (!is_null($this->container['user']) && !preg_match("/^[UW][A-Z0-9]{8}$/", $this->container['user'])) {
            $invalidProperties[] = "invalid value for 'user', must be conform to the pattern /^[UW][A-Z0-9]{8}$/.";
        }

        if (!is_null($this->container['user_team']) && !preg_match("/^[TE][A-Z0-9]{8}$/", $this->container['user_team'])) {
            $invalidProperties[] = "invalid value for 'user_team', must be conform to the pattern /^[TE][A-Z0-9]{8}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\ObjsMessageAttachments[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\ObjsMessageAttachments[]|null $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return object[]|null
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param object[]|null $blocks This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
     *
     * @return $this
     */
    public function setBlocks($blocks)
    {
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets bot_id
     *
     * @return object|null
     */
    public function getBotId()
    {
        return $this->container['bot_id'];
    }

    /**
     * Sets bot_id
     *
     * @param object|null $bot_id bot_id
     *
     * @return $this
     */
    public function setBotId($bot_id)
    {
        $this->container['bot_id'] = $bot_id;

        return $this;
    }

    /**
     * Gets client_msg_id
     *
     * @return string|null
     */
    public function getClientMsgId()
    {
        return $this->container['client_msg_id'];
    }

    /**
     * Sets client_msg_id
     *
     * @param string|null $client_msg_id client_msg_id
     *
     * @return $this
     */
    public function setClientMsgId($client_msg_id)
    {
        $this->container['client_msg_id'] = $client_msg_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \OpenAPI\Client\Model\ObjsComment|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \OpenAPI\Client\Model\ObjsComment|null $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets display_as_bot
     *
     * @return bool|null
     */
    public function getDisplayAsBot()
    {
        return $this->container['display_as_bot'];
    }

    /**
     * Sets display_as_bot
     *
     * @param bool|null $display_as_bot display_as_bot
     *
     * @return $this
     */
    public function setDisplayAsBot($display_as_bot)
    {
        $this->container['display_as_bot'] = $display_as_bot;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \OpenAPI\Client\Model\ObjsFile|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \OpenAPI\Client\Model\ObjsFile|null $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \OpenAPI\Client\Model\ObjsFile[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \OpenAPI\Client\Model\ObjsFile[]|null $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets icons
     *
     * @return \OpenAPI\Client\Model\ObjsMessageIcons|null
     */
    public function getIcons()
    {
        return $this->container['icons'];
    }

    /**
     * Sets icons
     *
     * @param \OpenAPI\Client\Model\ObjsMessageIcons|null $icons icons
     *
     * @return $this
     */
    public function setIcons($icons)
    {
        $this->container['icons'] = $icons;

        return $this;
    }

    /**
     * Gets inviter
     *
     * @return string|null
     */
    public function getInviter()
    {
        return $this->container['inviter'];
    }

    /**
     * Sets inviter
     *
     * @param string|null $inviter inviter
     *
     * @return $this
     */
    public function setInviter($inviter)
    {

        if (!is_null($inviter) && (!preg_match("/^[UW][A-Z0-9]{8}$/", $inviter))) {
            throw new \InvalidArgumentException("invalid value for $inviter when calling ObjsMessage., must conform to the pattern /^[UW][A-Z0-9]{8}$/.");
        }

        $this->container['inviter'] = $inviter;

        return $this;
    }

    /**
     * Gets is_delayed_message
     *
     * @return bool|null
     */
    public function getIsDelayedMessage()
    {
        return $this->container['is_delayed_message'];
    }

    /**
     * Sets is_delayed_message
     *
     * @param bool|null $is_delayed_message is_delayed_message
     *
     * @return $this
     */
    public function setIsDelayedMessage($is_delayed_message)
    {
        $this->container['is_delayed_message'] = $is_delayed_message;

        return $this;
    }

    /**
     * Gets is_intro
     *
     * @return bool|null
     */
    public function getIsIntro()
    {
        return $this->container['is_intro'];
    }

    /**
     * Sets is_intro
     *
     * @param bool|null $is_intro is_intro
     *
     * @return $this
     */
    public function setIsIntro($is_intro)
    {
        $this->container['is_intro'] = $is_intro;

        return $this;
    }

    /**
     * Gets is_starred
     *
     * @return bool|null
     */
    public function getIsStarred()
    {
        return $this->container['is_starred'];
    }

    /**
     * Sets is_starred
     *
     * @param bool|null $is_starred is_starred
     *
     * @return $this
     */
    public function setIsStarred($is_starred)
    {
        $this->container['is_starred'] = $is_starred;

        return $this;
    }

    /**
     * Gets last_read
     *
     * @return string|null
     */
    public function getLastRead()
    {
        return $this->container['last_read'];
    }

    /**
     * Sets last_read
     *
     * @param string|null $last_read last_read
     *
     * @return $this
     */
    public function setLastRead($last_read)
    {

        if (!is_null($last_read) && (!preg_match("/^\\d{10}\\.\\d{6}$/", $last_read))) {
            throw new \InvalidArgumentException("invalid value for $last_read when calling ObjsMessage., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }

        $this->container['last_read'] = $last_read;

        return $this;
    }

    /**
     * Gets latest_reply
     *
     * @return string|null
     */
    public function getLatestReply()
    {
        return $this->container['latest_reply'];
    }

    /**
     * Sets latest_reply
     *
     * @param string|null $latest_reply latest_reply
     *
     * @return $this
     */
    public function setLatestReply($latest_reply)
    {

        if (!is_null($latest_reply) && (!preg_match("/^\\d{10}\\.\\d{6}$/", $latest_reply))) {
            throw new \InvalidArgumentException("invalid value for $latest_reply when calling ObjsMessage., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }

        $this->container['latest_reply'] = $latest_reply;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets old_name
     *
     * @return string|null
     */
    public function getOldName()
    {
        return $this->container['old_name'];
    }

    /**
     * Sets old_name
     *
     * @param string|null $old_name old_name
     *
     * @return $this
     */
    public function setOldName($old_name)
    {
        $this->container['old_name'] = $old_name;

        return $this;
    }

    /**
     * Gets parent_user_id
     *
     * @return string|null
     */
    public function getParentUserId()
    {
        return $this->container['parent_user_id'];
    }

    /**
     * Sets parent_user_id
     *
     * @param string|null $parent_user_id parent_user_id
     *
     * @return $this
     */
    public function setParentUserId($parent_user_id)
    {

        if (!is_null($parent_user_id) && (!preg_match("/^[UW][A-Z0-9]{8}$/", $parent_user_id))) {
            throw new \InvalidArgumentException("invalid value for $parent_user_id when calling ObjsMessage., must conform to the pattern /^[UW][A-Z0-9]{8}$/.");
        }

        $this->container['parent_user_id'] = $parent_user_id;

        return $this;
    }

    /**
     * Gets permalink
     *
     * @return string|null
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     *
     * @param string|null $permalink permalink
     *
     * @return $this
     */
    public function setPermalink($permalink)
    {
        $this->container['permalink'] = $permalink;

        return $this;
    }

    /**
     * Gets pinned_to
     *
     * @return string[]|null
     */
    public function getPinnedTo()
    {
        return $this->container['pinned_to'];
    }

    /**
     * Sets pinned_to
     *
     * @param string[]|null $pinned_to pinned_to
     *
     * @return $this
     */
    public function setPinnedTo($pinned_to)
    {
        $this->container['pinned_to'] = $pinned_to;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string|null
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string|null $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \OpenAPI\Client\Model\ObjsReaction[]|null
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \OpenAPI\Client\Model\ObjsReaction[]|null $reactions reactions
     *
     * @return $this
     */
    public function setReactions($reactions)
    {
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets replies
     *
     * @return \OpenAPI\Client\Model\ObjsMessageReplies[]|null
     */
    public function getReplies()
    {
        return $this->container['replies'];
    }

    /**
     * Sets replies
     *
     * @param \OpenAPI\Client\Model\ObjsMessageReplies[]|null $replies replies
     *
     * @return $this
     */
    public function setReplies($replies)
    {
        $this->container['replies'] = $replies;

        return $this;
    }

    /**
     * Gets reply_count
     *
     * @return int|null
     */
    public function getReplyCount()
    {
        return $this->container['reply_count'];
    }

    /**
     * Sets reply_count
     *
     * @param int|null $reply_count reply_count
     *
     * @return $this
     */
    public function setReplyCount($reply_count)
    {
        $this->container['reply_count'] = $reply_count;

        return $this;
    }

    /**
     * Gets reply_users
     *
     * @return string[]|null
     */
    public function getReplyUsers()
    {
        return $this->container['reply_users'];
    }

    /**
     * Sets reply_users
     *
     * @param string[]|null $reply_users reply_users
     *
     * @return $this
     */
    public function setReplyUsers($reply_users)
    {
        $this->container['reply_users'] = $reply_users;

        return $this;
    }

    /**
     * Gets reply_users_count
     *
     * @return int|null
     */
    public function getReplyUsersCount()
    {
        return $this->container['reply_users_count'];
    }

    /**
     * Sets reply_users_count
     *
     * @param int|null $reply_users_count reply_users_count
     *
     * @return $this
     */
    public function setReplyUsersCount($reply_users_count)
    {
        $this->container['reply_users_count'] = $reply_users_count;

        return $this;
    }

    /**
     * Gets source_team
     *
     * @return string|null
     */
    public function getSourceTeam()
    {
        return $this->container['source_team'];
    }

    /**
     * Sets source_team
     *
     * @param string|null $source_team source_team
     *
     * @return $this
     */
    public function setSourceTeam($source_team)
    {

        if (!is_null($source_team) && (!preg_match("/^[TE][A-Z0-9]{8}$/", $source_team))) {
            throw new \InvalidArgumentException("invalid value for $source_team when calling ObjsMessage., must conform to the pattern /^[TE][A-Z0-9]{8}$/.");
        }

        $this->container['source_team'] = $source_team;

        return $this;
    }

    /**
     * Gets subscribed
     *
     * @return bool|null
     */
    public function getSubscribed()
    {
        return $this->container['subscribed'];
    }

    /**
     * Sets subscribed
     *
     * @param bool|null $subscribed subscribed
     *
     * @return $this
     */
    public function setSubscribed($subscribed)
    {
        $this->container['subscribed'] = $subscribed;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype subtype
     *
     * @return $this
     */
    public function setSubtype($subtype)
    {
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string|null $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {

        if (!is_null($team) && (!preg_match("/^[TE][A-Z0-9]{8}$/", $team))) {
            throw new \InvalidArgumentException("invalid value for $team when calling ObjsMessage., must conform to the pattern /^[TE][A-Z0-9]{8}$/.");
        }

        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets thread_ts
     *
     * @return string|null
     */
    public function getThreadTs()
    {
        return $this->container['thread_ts'];
    }

    /**
     * Sets thread_ts
     *
     * @param string|null $thread_ts thread_ts
     *
     * @return $this
     */
    public function setThreadTs($thread_ts)
    {

        if (!is_null($thread_ts) && (!preg_match("/^\\d{10}\\.\\d{6}$/", $thread_ts))) {
            throw new \InvalidArgumentException("invalid value for $thread_ts when calling ObjsMessage., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }

        $this->container['thread_ts'] = $thread_ts;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return string|null
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string|null $topic topic
     *
     * @return $this
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts ts
     *
     * @return $this
     */
    public function setTs($ts)
    {

        if ((!preg_match("/^\\d{10}\\.\\d{6}$/", $ts))) {
            throw new \InvalidArgumentException("invalid value for $ts when calling ObjsMessage., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }

        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unread_count
     *
     * @return int|null
     */
    public function getUnreadCount()
    {
        return $this->container['unread_count'];
    }

    /**
     * Sets unread_count
     *
     * @param int|null $unread_count unread_count
     *
     * @return $this
     */
    public function setUnreadCount($unread_count)
    {
        $this->container['unread_count'] = $unread_count;

        return $this;
    }

    /**
     * Gets upload
     *
     * @return bool|null
     */
    public function getUpload()
    {
        return $this->container['upload'];
    }

    /**
     * Sets upload
     *
     * @param bool|null $upload upload
     *
     * @return $this
     */
    public function setUpload($upload)
    {
        $this->container['upload'] = $upload;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return $this
     */
    public function setUser($user)
    {

        if (!is_null($user) && (!preg_match("/^[UW][A-Z0-9]{8}$/", $user))) {
            throw new \InvalidArgumentException("invalid value for $user when calling ObjsMessage., must conform to the pattern /^[UW][A-Z0-9]{8}$/.");
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_profile
     *
     * @return \OpenAPI\Client\Model\ObjsUserProfileShort|null
     */
    public function getUserProfile()
    {
        return $this->container['user_profile'];
    }

    /**
     * Sets user_profile
     *
     * @param \OpenAPI\Client\Model\ObjsUserProfileShort|null $user_profile user_profile
     *
     * @return $this
     */
    public function setUserProfile($user_profile)
    {
        $this->container['user_profile'] = $user_profile;

        return $this;
    }

    /**
     * Gets user_team
     *
     * @return string|null
     */
    public function getUserTeam()
    {
        return $this->container['user_team'];
    }

    /**
     * Sets user_team
     *
     * @param string|null $user_team user_team
     *
     * @return $this
     */
    public function setUserTeam($user_team)
    {

        if (!is_null($user_team) && (!preg_match("/^[TE][A-Z0-9]{8}$/", $user_team))) {
            throw new \InvalidArgumentException("invalid value for $user_team when calling ObjsMessage., must conform to the pattern /^[TE][A-Z0-9]{8}$/.");
        }

        $this->container['user_team'] = $user_team;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


