<?php
/**
 * ObjsIcon
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsIcon Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjsIcon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_icon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'image_102' => 'string',
        'image_132' => 'string',
        'image_230' => 'string',
        'image_34' => 'string',
        'image_44' => 'string',
        'image_68' => 'string',
        'image_88' => 'string',
        'image_default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'image_102' => null,
        'image_132' => null,
        'image_230' => null,
        'image_34' => null,
        'image_44' => null,
        'image_68' => null,
        'image_88' => null,
        'image_default' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_102' => 'image_102',
        'image_132' => 'image_132',
        'image_230' => 'image_230',
        'image_34' => 'image_34',
        'image_44' => 'image_44',
        'image_68' => 'image_68',
        'image_88' => 'image_88',
        'image_default' => 'image_default'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_102' => 'setImage102',
        'image_132' => 'setImage132',
        'image_230' => 'setImage230',
        'image_34' => 'setImage34',
        'image_44' => 'setImage44',
        'image_68' => 'setImage68',
        'image_88' => 'setImage88',
        'image_default' => 'setImageDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_102' => 'getImage102',
        'image_132' => 'getImage132',
        'image_230' => 'getImage230',
        'image_34' => 'getImage34',
        'image_44' => 'getImage44',
        'image_68' => 'getImage68',
        'image_88' => 'getImage88',
        'image_default' => 'getImageDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_102'] = isset($data['image_102']) ? $data['image_102'] : null;
        $this->container['image_132'] = isset($data['image_132']) ? $data['image_132'] : null;
        $this->container['image_230'] = isset($data['image_230']) ? $data['image_230'] : null;
        $this->container['image_34'] = isset($data['image_34']) ? $data['image_34'] : null;
        $this->container['image_44'] = isset($data['image_44']) ? $data['image_44'] : null;
        $this->container['image_68'] = isset($data['image_68']) ? $data['image_68'] : null;
        $this->container['image_88'] = isset($data['image_88']) ? $data['image_88'] : null;
        $this->container['image_default'] = isset($data['image_default']) ? $data['image_default'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_102
     *
     * @return string|null
     */
    public function getImage102()
    {
        return $this->container['image_102'];
    }

    /**
     * Sets image_102
     *
     * @param string|null $image_102 image_102
     *
     * @return $this
     */
    public function setImage102($image_102)
    {
        $this->container['image_102'] = $image_102;

        return $this;
    }

    /**
     * Gets image_132
     *
     * @return string|null
     */
    public function getImage132()
    {
        return $this->container['image_132'];
    }

    /**
     * Sets image_132
     *
     * @param string|null $image_132 image_132
     *
     * @return $this
     */
    public function setImage132($image_132)
    {
        $this->container['image_132'] = $image_132;

        return $this;
    }

    /**
     * Gets image_230
     *
     * @return string|null
     */
    public function getImage230()
    {
        return $this->container['image_230'];
    }

    /**
     * Sets image_230
     *
     * @param string|null $image_230 image_230
     *
     * @return $this
     */
    public function setImage230($image_230)
    {
        $this->container['image_230'] = $image_230;

        return $this;
    }

    /**
     * Gets image_34
     *
     * @return string|null
     */
    public function getImage34()
    {
        return $this->container['image_34'];
    }

    /**
     * Sets image_34
     *
     * @param string|null $image_34 image_34
     *
     * @return $this
     */
    public function setImage34($image_34)
    {
        $this->container['image_34'] = $image_34;

        return $this;
    }

    /**
     * Gets image_44
     *
     * @return string|null
     */
    public function getImage44()
    {
        return $this->container['image_44'];
    }

    /**
     * Sets image_44
     *
     * @param string|null $image_44 image_44
     *
     * @return $this
     */
    public function setImage44($image_44)
    {
        $this->container['image_44'] = $image_44;

        return $this;
    }

    /**
     * Gets image_68
     *
     * @return string|null
     */
    public function getImage68()
    {
        return $this->container['image_68'];
    }

    /**
     * Sets image_68
     *
     * @param string|null $image_68 image_68
     *
     * @return $this
     */
    public function setImage68($image_68)
    {
        $this->container['image_68'] = $image_68;

        return $this;
    }

    /**
     * Gets image_88
     *
     * @return string|null
     */
    public function getImage88()
    {
        return $this->container['image_88'];
    }

    /**
     * Sets image_88
     *
     * @param string|null $image_88 image_88
     *
     * @return $this
     */
    public function setImage88($image_88)
    {
        $this->container['image_88'] = $image_88;

        return $this;
    }

    /**
     * Gets image_default
     *
     * @return bool|null
     */
    public function getImageDefault()
    {
        return $this->container['image_default'];
    }

    /**
     * Sets image_default
     *
     * @param bool|null $image_default image_default
     *
     * @return $this
     */
    public function setImageDefault($image_default)
    {
        $this->container['image_default'] = $image_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


