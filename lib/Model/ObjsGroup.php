<?php
/**
 * ObjsGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsGroup Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjsGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created' => 'int',
        'creator' => 'string',
        'id' => 'string',
        'is_archived' => 'bool',
        'is_deleted' => 'bool',
        'is_group' => 'bool',
        'is_moved' => 'int',
        'is_mpim' => 'bool',
        'is_open' => 'bool',
        'is_pending_ext_shared' => 'bool',
        'last_read' => 'string',
        'latest' => 'object',
        'members' => 'string[]',
        'name' => 'string',
        'name_normalized' => 'string',
        'num_members' => 'int',
        'priority' => 'float',
        'purpose' => '\OpenAPI\Client\Model\ObjsChannelPurpose',
        'topic' => '\OpenAPI\Client\Model\ObjsChannelPurpose',
        'unread_count' => 'int',
        'unread_count_display' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'created' => null,
        'creator' => null,
        'id' => null,
        'is_archived' => null,
        'is_deleted' => null,
        'is_group' => null,
        'is_moved' => null,
        'is_mpim' => null,
        'is_open' => null,
        'is_pending_ext_shared' => null,
        'last_read' => null,
        'latest' => null,
        'members' => null,
        'name' => null,
        'name_normalized' => null,
        'num_members' => null,
        'priority' => null,
        'purpose' => null,
        'topic' => null,
        'unread_count' => null,
        'unread_count_display' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'creator' => 'creator',
        'id' => 'id',
        'is_archived' => 'is_archived',
        'is_deleted' => 'is_deleted',
        'is_group' => 'is_group',
        'is_moved' => 'is_moved',
        'is_mpim' => 'is_mpim',
        'is_open' => 'is_open',
        'is_pending_ext_shared' => 'is_pending_ext_shared',
        'last_read' => 'last_read',
        'latest' => 'latest',
        'members' => 'members',
        'name' => 'name',
        'name_normalized' => 'name_normalized',
        'num_members' => 'num_members',
        'priority' => 'priority',
        'purpose' => 'purpose',
        'topic' => 'topic',
        'unread_count' => 'unread_count',
        'unread_count_display' => 'unread_count_display'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'creator' => 'setCreator',
        'id' => 'setId',
        'is_archived' => 'setIsArchived',
        'is_deleted' => 'setIsDeleted',
        'is_group' => 'setIsGroup',
        'is_moved' => 'setIsMoved',
        'is_mpim' => 'setIsMpim',
        'is_open' => 'setIsOpen',
        'is_pending_ext_shared' => 'setIsPendingExtShared',
        'last_read' => 'setLastRead',
        'latest' => 'setLatest',
        'members' => 'setMembers',
        'name' => 'setName',
        'name_normalized' => 'setNameNormalized',
        'num_members' => 'setNumMembers',
        'priority' => 'setPriority',
        'purpose' => 'setPurpose',
        'topic' => 'setTopic',
        'unread_count' => 'setUnreadCount',
        'unread_count_display' => 'setUnreadCountDisplay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'creator' => 'getCreator',
        'id' => 'getId',
        'is_archived' => 'getIsArchived',
        'is_deleted' => 'getIsDeleted',
        'is_group' => 'getIsGroup',
        'is_moved' => 'getIsMoved',
        'is_mpim' => 'getIsMpim',
        'is_open' => 'getIsOpen',
        'is_pending_ext_shared' => 'getIsPendingExtShared',
        'last_read' => 'getLastRead',
        'latest' => 'getLatest',
        'members' => 'getMembers',
        'name' => 'getName',
        'name_normalized' => 'getNameNormalized',
        'num_members' => 'getNumMembers',
        'priority' => 'getPriority',
        'purpose' => 'getPurpose',
        'topic' => 'getTopic',
        'unread_count' => 'getUnreadCount',
        'unread_count_display' => 'getUnreadCountDisplay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_archived'] = isset($data['is_archived']) ? $data['is_archived'] : null;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : null;
        $this->container['is_group'] = isset($data['is_group']) ? $data['is_group'] : null;
        $this->container['is_moved'] = isset($data['is_moved']) ? $data['is_moved'] : null;
        $this->container['is_mpim'] = isset($data['is_mpim']) ? $data['is_mpim'] : null;
        $this->container['is_open'] = isset($data['is_open']) ? $data['is_open'] : null;
        $this->container['is_pending_ext_shared'] = isset($data['is_pending_ext_shared']) ? $data['is_pending_ext_shared'] : null;
        $this->container['last_read'] = isset($data['last_read']) ? $data['last_read'] : null;
        $this->container['latest'] = isset($data['latest']) ? $data['latest'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_normalized'] = isset($data['name_normalized']) ? $data['name_normalized'] : null;
        $this->container['num_members'] = isset($data['num_members']) ? $data['num_members'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['topic'] = isset($data['topic']) ? $data['topic'] : null;
        $this->container['unread_count'] = isset($data['unread_count']) ? $data['unread_count'] : null;
        $this->container['unread_count_display'] = isset($data['unread_count_display']) ? $data['unread_count_display'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['creator'] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if (!preg_match("/^[UW][A-Z0-9]{8}$/", $this->container['creator'])) {
            $invalidProperties[] = "invalid value for 'creator', must be conform to the pattern /^[UW][A-Z0-9]{8}$/.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[G][A-Z0-9]{8}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[G][A-Z0-9]{8}$/.";
        }

        if ($this->container['is_group'] === null) {
            $invalidProperties[] = "'is_group' can't be null";
        }
        if (!is_null($this->container['last_read']) && !preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['last_read'])) {
            $invalidProperties[] = "invalid value for 'last_read', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if ($this->container['members'] === null) {
            $invalidProperties[] = "'members' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['name_normalized'] === null) {
            $invalidProperties[] = "'name_normalized' can't be null";
        }
        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }
        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {

        if ((!preg_match("/^[UW][A-Z0-9]{8}$/", $creator))) {
            throw new \InvalidArgumentException("invalid value for $creator when calling ObjsGroup., must conform to the pattern /^[UW][A-Z0-9]{8}$/.");
        }

        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {

        if ((!preg_match("/^[G][A-Z0-9]{8}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling ObjsGroup., must conform to the pattern /^[G][A-Z0-9]{8}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return $this
     */
    public function setIsArchived($is_archived)
    {
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return $this
     */
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_group
     *
     * @return bool
     */
    public function getIsGroup()
    {
        return $this->container['is_group'];
    }

    /**
     * Sets is_group
     *
     * @param bool $is_group is_group
     *
     * @return $this
     */
    public function setIsGroup($is_group)
    {
        $this->container['is_group'] = $is_group;

        return $this;
    }

    /**
     * Gets is_moved
     *
     * @return int|null
     */
    public function getIsMoved()
    {
        return $this->container['is_moved'];
    }

    /**
     * Sets is_moved
     *
     * @param int|null $is_moved is_moved
     *
     * @return $this
     */
    public function setIsMoved($is_moved)
    {
        $this->container['is_moved'] = $is_moved;

        return $this;
    }

    /**
     * Gets is_mpim
     *
     * @return bool|null
     */
    public function getIsMpim()
    {
        return $this->container['is_mpim'];
    }

    /**
     * Sets is_mpim
     *
     * @param bool|null $is_mpim is_mpim
     *
     * @return $this
     */
    public function setIsMpim($is_mpim)
    {
        $this->container['is_mpim'] = $is_mpim;

        return $this;
    }

    /**
     * Gets is_open
     *
     * @return bool|null
     */
    public function getIsOpen()
    {
        return $this->container['is_open'];
    }

    /**
     * Sets is_open
     *
     * @param bool|null $is_open is_open
     *
     * @return $this
     */
    public function setIsOpen($is_open)
    {
        $this->container['is_open'] = $is_open;

        return $this;
    }

    /**
     * Gets is_pending_ext_shared
     *
     * @return bool|null
     */
    public function getIsPendingExtShared()
    {
        return $this->container['is_pending_ext_shared'];
    }

    /**
     * Sets is_pending_ext_shared
     *
     * @param bool|null $is_pending_ext_shared is_pending_ext_shared
     *
     * @return $this
     */
    public function setIsPendingExtShared($is_pending_ext_shared)
    {
        $this->container['is_pending_ext_shared'] = $is_pending_ext_shared;

        return $this;
    }

    /**
     * Gets last_read
     *
     * @return string|null
     */
    public function getLastRead()
    {
        return $this->container['last_read'];
    }

    /**
     * Sets last_read
     *
     * @param string|null $last_read last_read
     *
     * @return $this
     */
    public function setLastRead($last_read)
    {

        if (!is_null($last_read) && (!preg_match("/^\\d{10}\\.\\d{6}$/", $last_read))) {
            throw new \InvalidArgumentException("invalid value for $last_read when calling ObjsGroup., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }

        $this->container['last_read'] = $last_read;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return object|null
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param object|null $latest latest
     *
     * @return $this
     */
    public function setLatest($latest)
    {
        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets members
     *
     * @return string[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param string[] $members members
     *
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_normalized
     *
     * @return string
     */
    public function getNameNormalized()
    {
        return $this->container['name_normalized'];
    }

    /**
     * Sets name_normalized
     *
     * @param string $name_normalized name_normalized
     *
     * @return $this
     */
    public function setNameNormalized($name_normalized)
    {
        $this->container['name_normalized'] = $name_normalized;

        return $this;
    }

    /**
     * Gets num_members
     *
     * @return int|null
     */
    public function getNumMembers()
    {
        return $this->container['num_members'];
    }

    /**
     * Sets num_members
     *
     * @param int|null $num_members num_members
     *
     * @return $this
     */
    public function setNumMembers($num_members)
    {
        $this->container['num_members'] = $num_members;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return float|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param float|null $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return \OpenAPI\Client\Model\ObjsChannelPurpose
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param \OpenAPI\Client\Model\ObjsChannelPurpose $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return \OpenAPI\Client\Model\ObjsChannelPurpose
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param \OpenAPI\Client\Model\ObjsChannelPurpose $topic topic
     *
     * @return $this
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets unread_count
     *
     * @return int|null
     */
    public function getUnreadCount()
    {
        return $this->container['unread_count'];
    }

    /**
     * Sets unread_count
     *
     * @param int|null $unread_count unread_count
     *
     * @return $this
     */
    public function setUnreadCount($unread_count)
    {
        $this->container['unread_count'] = $unread_count;

        return $this;
    }

    /**
     * Gets unread_count_display
     *
     * @return int|null
     */
    public function getUnreadCountDisplay()
    {
        return $this->container['unread_count_display'];
    }

    /**
     * Sets unread_count_display
     *
     * @param int|null $unread_count_display unread_count_display
     *
     * @return $this
     */
    public function setUnreadCountDisplay($unread_count_display)
    {
        $this->container['unread_count_display'] = $unread_count_display;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


