<?php
/**
 * ObjsTeam
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsTeam Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjsTeam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_team';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archived' => 'bool',
        'avatar_base_url' => 'string',
        'created' => 'int',
        'date_create' => 'int',
        'deleted' => 'bool',
        'description' => 'string',
        'discoverable' => 'string',
        'domain' => 'string',
        'email_domain' => 'string',
        'enterprise_id' => 'string',
        'enterprise_name' => 'string',
        'has_compliance_export' => 'bool',
        'icon' => '\OpenAPI\Client\Model\ObjsIcon',
        'id' => 'string',
        'is_assigned' => 'bool',
        'is_enterprise' => 'int',
        'limit_ts' => 'int',
        'messages_count' => 'int',
        'msg_edit_window_mins' => 'int',
        'name' => 'string',
        'over_integrations_limit' => 'bool',
        'over_storage_limit' => 'bool',
        'plan' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'archived' => null,
        'avatar_base_url' => 'uri',
        'created' => null,
        'date_create' => null,
        'deleted' => null,
        'description' => null,
        'discoverable' => null,
        'domain' => null,
        'email_domain' => null,
        'enterprise_id' => null,
        'enterprise_name' => null,
        'has_compliance_export' => null,
        'icon' => null,
        'id' => null,
        'is_assigned' => null,
        'is_enterprise' => null,
        'limit_ts' => null,
        'messages_count' => null,
        'msg_edit_window_mins' => null,
        'name' => null,
        'over_integrations_limit' => null,
        'over_storage_limit' => null,
        'plan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'avatar_base_url' => 'avatar_base_url',
        'created' => 'created',
        'date_create' => 'date_create',
        'deleted' => 'deleted',
        'description' => 'description',
        'discoverable' => 'discoverable',
        'domain' => 'domain',
        'email_domain' => 'email_domain',
        'enterprise_id' => 'enterprise_id',
        'enterprise_name' => 'enterprise_name',
        'has_compliance_export' => 'has_compliance_export',
        'icon' => 'icon',
        'id' => 'id',
        'is_assigned' => 'is_assigned',
        'is_enterprise' => 'is_enterprise',
        'limit_ts' => 'limit_ts',
        'messages_count' => 'messages_count',
        'msg_edit_window_mins' => 'msg_edit_window_mins',
        'name' => 'name',
        'over_integrations_limit' => 'over_integrations_limit',
        'over_storage_limit' => 'over_storage_limit',
        'plan' => 'plan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'avatar_base_url' => 'setAvatarBaseUrl',
        'created' => 'setCreated',
        'date_create' => 'setDateCreate',
        'deleted' => 'setDeleted',
        'description' => 'setDescription',
        'discoverable' => 'setDiscoverable',
        'domain' => 'setDomain',
        'email_domain' => 'setEmailDomain',
        'enterprise_id' => 'setEnterpriseId',
        'enterprise_name' => 'setEnterpriseName',
        'has_compliance_export' => 'setHasComplianceExport',
        'icon' => 'setIcon',
        'id' => 'setId',
        'is_assigned' => 'setIsAssigned',
        'is_enterprise' => 'setIsEnterprise',
        'limit_ts' => 'setLimitTs',
        'messages_count' => 'setMessagesCount',
        'msg_edit_window_mins' => 'setMsgEditWindowMins',
        'name' => 'setName',
        'over_integrations_limit' => 'setOverIntegrationsLimit',
        'over_storage_limit' => 'setOverStorageLimit',
        'plan' => 'setPlan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'avatar_base_url' => 'getAvatarBaseUrl',
        'created' => 'getCreated',
        'date_create' => 'getDateCreate',
        'deleted' => 'getDeleted',
        'description' => 'getDescription',
        'discoverable' => 'getDiscoverable',
        'domain' => 'getDomain',
        'email_domain' => 'getEmailDomain',
        'enterprise_id' => 'getEnterpriseId',
        'enterprise_name' => 'getEnterpriseName',
        'has_compliance_export' => 'getHasComplianceExport',
        'icon' => 'getIcon',
        'id' => 'getId',
        'is_assigned' => 'getIsAssigned',
        'is_enterprise' => 'getIsEnterprise',
        'limit_ts' => 'getLimitTs',
        'messages_count' => 'getMessagesCount',
        'msg_edit_window_mins' => 'getMsgEditWindowMins',
        'name' => 'getName',
        'over_integrations_limit' => 'getOverIntegrationsLimit',
        'over_storage_limit' => 'getOverStorageLimit',
        'plan' => 'getPlan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PLAN_EMPTY = '';
    const PLAN_STD = 'std';
    const PLAN_PLUS = 'plus';
    const PLAN_COMPLIANCE = 'compliance';
    const PLAN_ENTERPRISE = 'enterprise';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanAllowableValues()
    {
        return [
            self::PLAN_EMPTY,
            self::PLAN_STD,
            self::PLAN_PLUS,
            self::PLAN_COMPLIANCE,
            self::PLAN_ENTERPRISE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['avatar_base_url'] = isset($data['avatar_base_url']) ? $data['avatar_base_url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['date_create'] = isset($data['date_create']) ? $data['date_create'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discoverable'] = isset($data['discoverable']) ? $data['discoverable'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['email_domain'] = isset($data['email_domain']) ? $data['email_domain'] : null;
        $this->container['enterprise_id'] = isset($data['enterprise_id']) ? $data['enterprise_id'] : null;
        $this->container['enterprise_name'] = isset($data['enterprise_name']) ? $data['enterprise_name'] : null;
        $this->container['has_compliance_export'] = isset($data['has_compliance_export']) ? $data['has_compliance_export'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_assigned'] = isset($data['is_assigned']) ? $data['is_assigned'] : null;
        $this->container['is_enterprise'] = isset($data['is_enterprise']) ? $data['is_enterprise'] : null;
        $this->container['limit_ts'] = isset($data['limit_ts']) ? $data['limit_ts'] : null;
        $this->container['messages_count'] = isset($data['messages_count']) ? $data['messages_count'] : null;
        $this->container['msg_edit_window_mins'] = isset($data['msg_edit_window_mins']) ? $data['msg_edit_window_mins'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['over_integrations_limit'] = isset($data['over_integrations_limit']) ? $data['over_integrations_limit'] : null;
        $this->container['over_storage_limit'] = isset($data['over_storage_limit']) ? $data['over_storage_limit'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['email_domain'] === null) {
            $invalidProperties[] = "'email_domain' can't be null";
        }
        if (!is_null($this->container['enterprise_id']) && !preg_match("/^[E][A-Z0-9]{8}$/", $this->container['enterprise_id'])) {
            $invalidProperties[] = "invalid value for 'enterprise_id', must be conform to the pattern /^[E][A-Z0-9]{8}$/.";
        }

        if ($this->container['icon'] === null) {
            $invalidProperties[] = "'icon' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[T][A-Z0-9]{8}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[T][A-Z0-9]{8}$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getPlanAllowableValues();
        if (!is_null($this->container['plan']) && !in_array($this->container['plan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'plan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets avatar_base_url
     *
     * @return string|null
     */
    public function getAvatarBaseUrl()
    {
        return $this->container['avatar_base_url'];
    }

    /**
     * Sets avatar_base_url
     *
     * @param string|null $avatar_base_url avatar_base_url
     *
     * @return $this
     */
    public function setAvatarBaseUrl($avatar_base_url)
    {
        $this->container['avatar_base_url'] = $avatar_base_url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int|null $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets date_create
     *
     * @return int|null
     */
    public function getDateCreate()
    {
        return $this->container['date_create'];
    }

    /**
     * Sets date_create
     *
     * @param int|null $date_create date_create
     *
     * @return $this
     */
    public function setDateCreate($date_create)
    {
        $this->container['date_create'] = $date_create;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discoverable
     *
     * @return string|null
     */
    public function getDiscoverable()
    {
        return $this->container['discoverable'];
    }

    /**
     * Sets discoverable
     *
     * @param string|null $discoverable discoverable
     *
     * @return $this
     */
    public function setDiscoverable($discoverable)
    {
        $this->container['discoverable'] = $discoverable;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets email_domain
     *
     * @return string
     */
    public function getEmailDomain()
    {
        return $this->container['email_domain'];
    }

    /**
     * Sets email_domain
     *
     * @param string $email_domain email_domain
     *
     * @return $this
     */
    public function setEmailDomain($email_domain)
    {
        $this->container['email_domain'] = $email_domain;

        return $this;
    }

    /**
     * Gets enterprise_id
     *
     * @return string|null
     */
    public function getEnterpriseId()
    {
        return $this->container['enterprise_id'];
    }

    /**
     * Sets enterprise_id
     *
     * @param string|null $enterprise_id enterprise_id
     *
     * @return $this
     */
    public function setEnterpriseId($enterprise_id)
    {

        if (!is_null($enterprise_id) && (!preg_match("/^[E][A-Z0-9]{8}$/", $enterprise_id))) {
            throw new \InvalidArgumentException("invalid value for $enterprise_id when calling ObjsTeam., must conform to the pattern /^[E][A-Z0-9]{8}$/.");
        }

        $this->container['enterprise_id'] = $enterprise_id;

        return $this;
    }

    /**
     * Gets enterprise_name
     *
     * @return string|null
     */
    public function getEnterpriseName()
    {
        return $this->container['enterprise_name'];
    }

    /**
     * Sets enterprise_name
     *
     * @param string|null $enterprise_name enterprise_name
     *
     * @return $this
     */
    public function setEnterpriseName($enterprise_name)
    {
        $this->container['enterprise_name'] = $enterprise_name;

        return $this;
    }

    /**
     * Gets has_compliance_export
     *
     * @return bool|null
     */
    public function getHasComplianceExport()
    {
        return $this->container['has_compliance_export'];
    }

    /**
     * Sets has_compliance_export
     *
     * @param bool|null $has_compliance_export has_compliance_export
     *
     * @return $this
     */
    public function setHasComplianceExport($has_compliance_export)
    {
        $this->container['has_compliance_export'] = $has_compliance_export;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return \OpenAPI\Client\Model\ObjsIcon
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param \OpenAPI\Client\Model\ObjsIcon $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {

        if ((!preg_match("/^[T][A-Z0-9]{8}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling ObjsTeam., must conform to the pattern /^[T][A-Z0-9]{8}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_assigned
     *
     * @return bool|null
     */
    public function getIsAssigned()
    {
        return $this->container['is_assigned'];
    }

    /**
     * Sets is_assigned
     *
     * @param bool|null $is_assigned is_assigned
     *
     * @return $this
     */
    public function setIsAssigned($is_assigned)
    {
        $this->container['is_assigned'] = $is_assigned;

        return $this;
    }

    /**
     * Gets is_enterprise
     *
     * @return int|null
     */
    public function getIsEnterprise()
    {
        return $this->container['is_enterprise'];
    }

    /**
     * Sets is_enterprise
     *
     * @param int|null $is_enterprise is_enterprise
     *
     * @return $this
     */
    public function setIsEnterprise($is_enterprise)
    {
        $this->container['is_enterprise'] = $is_enterprise;

        return $this;
    }

    /**
     * Gets limit_ts
     *
     * @return int|null
     */
    public function getLimitTs()
    {
        return $this->container['limit_ts'];
    }

    /**
     * Sets limit_ts
     *
     * @param int|null $limit_ts limit_ts
     *
     * @return $this
     */
    public function setLimitTs($limit_ts)
    {
        $this->container['limit_ts'] = $limit_ts;

        return $this;
    }

    /**
     * Gets messages_count
     *
     * @return int|null
     */
    public function getMessagesCount()
    {
        return $this->container['messages_count'];
    }

    /**
     * Sets messages_count
     *
     * @param int|null $messages_count messages_count
     *
     * @return $this
     */
    public function setMessagesCount($messages_count)
    {
        $this->container['messages_count'] = $messages_count;

        return $this;
    }

    /**
     * Gets msg_edit_window_mins
     *
     * @return int|null
     */
    public function getMsgEditWindowMins()
    {
        return $this->container['msg_edit_window_mins'];
    }

    /**
     * Sets msg_edit_window_mins
     *
     * @param int|null $msg_edit_window_mins msg_edit_window_mins
     *
     * @return $this
     */
    public function setMsgEditWindowMins($msg_edit_window_mins)
    {
        $this->container['msg_edit_window_mins'] = $msg_edit_window_mins;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets over_integrations_limit
     *
     * @return bool|null
     */
    public function getOverIntegrationsLimit()
    {
        return $this->container['over_integrations_limit'];
    }

    /**
     * Sets over_integrations_limit
     *
     * @param bool|null $over_integrations_limit over_integrations_limit
     *
     * @return $this
     */
    public function setOverIntegrationsLimit($over_integrations_limit)
    {
        $this->container['over_integrations_limit'] = $over_integrations_limit;

        return $this;
    }

    /**
     * Gets over_storage_limit
     *
     * @return bool|null
     */
    public function getOverStorageLimit()
    {
        return $this->container['over_storage_limit'];
    }

    /**
     * Sets over_storage_limit
     *
     * @param bool|null $over_storage_limit over_storage_limit
     *
     * @return $this
     */
    public function setOverStorageLimit($over_storage_limit)
    {
        $this->container['over_storage_limit'] = $over_storage_limit;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string|null $plan plan
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $allowedValues = $this->getPlanAllowableValues();
        if (!is_null($plan) && !in_array($plan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'plan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan'] = $plan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


